% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gkwreg.R
\name{gkwreg}
\alias{gkwreg}
\title{Fit Generalized Kumaraswamy Regression Models}
\usage{
gkwreg(
  formula,
  data,
  family = c("gkw", "bkw", "kkw", "ekw", "mc", "kw", "beta"),
  link = NULL,
  start = NULL,
  fixed = NULL,
  fit = "tmb",
  method = c("nlminb", "optim"),
  hessian = TRUE,
  profile = FALSE,
  npoints = 20,
  plot = TRUE,
  conf.level = 0.95,
  optimizer.control = list(),
  subset = NULL,
  weights = NULL,
  offset = NULL,
  na.action = getOption("na.action"),
  contrasts = NULL,
  x = FALSE,
  y = TRUE,
  model = TRUE,
  silent = TRUE,
  ...
)
}
\arguments{
\item{formula}{A Formula object of the form
\code{y ~ alpha_terms | beta_terms | gamma_terms | delta_terms | lambda_terms},
where each part on the right specifies the covariates for the corresponding parameter.
Missing parts are automatically replaced with intercept-only models.}

\item{data}{A data frame containing the variables in the model.}

\item{family}{A character string specifying the distribution family. One of: "gkw" (default),
"bkw", "kkw", "ekw", "mc", "kw", or "beta". See Details for parameter specifications.}

\item{link}{A character string or list of character strings specifying the link functions.
Default links for each parameter: log for \eqn{\alpha}, \eqn{\beta}, \eqn{\gamma}, \eqn{\lambda} and logit for \eqn{\delta}.
Supported link functions: "log", "logit", "identity", "inverse", "sqrt", "probit", "cloglog".}

\item{start}{Optional list with initial parameter values for regression coefficients.
If \code{NULL}, reasonable starting values will be determined.}

\item{fixed}{Optional list of parameters or coefficients to be held fixed (not estimated).}

\item{fit}{Estimation method to be used: currently only supports \code{"tmb"}.}

\item{method}{(Only for \code{fit = "tmb"}) Optimization method: \code{"nlminb"} (default) or \code{"optim"}.}

\item{hessian}{Logical; if \code{TRUE}, computes standard errors and the covariance matrix.}

\item{profile}{Logical; if \code{TRUE}, computes likelihood profiles for parameters.}

\item{npoints}{Number of points to use in profile likelihood calculations.}

\item{plot}{Logical; if \code{TRUE}, generates diagnostic plots.}

\item{conf.level}{Confidence level for intervals (default: 0.95).}

\item{optimizer.control}{List of control parameters passed to the optimizer.}

\item{subset}{An optional vector specifying a subset of observations to be used in the fitting process.}

\item{weights}{An optional vector of weights to be used in the fitting process.}

\item{offset}{Additional terms with known coefficients to be included in the linear predictors.}

\item{na.action}{Function to handle missing values.}

\item{contrasts}{List of contrasts to be used for factors in the model matrix.}

\item{x}{Logical; if \code{TRUE}, the model matrix is returned.}

\item{y}{Logical; if \code{TRUE}, the response vector is returned.}

\item{model}{Logical; if \code{TRUE}, the model frame is returned.}

\item{silent}{Logical; if \code{TRUE}, suppresses messages.}

\item{...}{Additional arguments passed to internal functions.}
}
\value{
An object of class \code{"gkwreg"} containing the fitted regression model.
}
\description{
Fits a regression model using the Generalized Kumaraswamy (GKw) family of distributions
for bounded responses in the (0, 1) interval. The function supports modeling parameters
from all seven submodels of the GKw family as functions of predictors through appropriate
link functions.
}
\details{
The \code{gkwreg} function extends the \code{gkwfit} framework to regression modeling,
allowing parameters of the GKw family to depend on covariates. The function handles
all seven distributions in the Generalized Kumaraswamy family with their specific parameter sets:

\itemize{
\item \strong{GKw} (Generalized Kumaraswamy): 5 parameters (\eqn{\alpha}, \eqn{\beta}, \eqn{\gamma}, \eqn{\delta}, \eqn{\lambda})
\item \strong{BKw} (Beta-Kumaraswamy): 4 parameters (\eqn{\alpha}, \eqn{\beta}, \eqn{\gamma}, \eqn{\delta}), with \eqn{\lambda = 1} fixed
\item \strong{KKw} (Kumaraswamy-Kumaraswamy): 4 parameters (\eqn{\alpha}, \eqn{\beta}, \eqn{\delta}, \eqn{\lambda}), with \eqn{\gamma = 1} fixed
\item \strong{EKw} (Exponentiated Kumaraswamy): 3 parameters (\eqn{\alpha}, \eqn{\beta}, \eqn{\lambda}), with \eqn{\gamma = 1}, \eqn{\delta = 0} fixed
\item \strong{Mc} (McDonald/Beta Power): 3 parameters (\eqn{\gamma}, \eqn{\delta}, \eqn{\lambda}), with \eqn{\alpha = 1}, \eqn{\beta = 1} fixed
\item \strong{Kw} (Kumaraswamy): 2 parameters (\eqn{\alpha}, \eqn{\beta}), with \eqn{\gamma = 1}, \eqn{\delta = 0}, \eqn{\lambda = 1} fixed
\item \strong{Beta}: 2 parameters (\eqn{\gamma}, \eqn{\delta}), with \eqn{\alpha = 1}, \eqn{\beta = 1}, \eqn{\lambda = 1} fixed
}

For each family, only the relevant parameters are modeled as functions of covariates. The fixed
parameters are automatically handled based on the selected family.

Default link functions are assigned based on parameter constraints:
\itemize{
\item "log" for \eqn{\alpha}, \eqn{\beta}, \eqn{\gamma}, and \eqn{\lambda} (which should be positive)
\item "logit" for \eqn{\delta} (which should be between 0 and 1 when standardized)
}
}
\examples{
\dontrun{
require(gkwreg)

## Example 1: Simple Kumaraswamy regression model
set.seed(123)
n <- 500
x1 <- runif(n, -2, 2)
x2 <- rnorm(n)

# Generate regression coefficients
alpha_coef <- c(0.8, 0.3, -0.2) # Intercept, x1, x2
beta_coef <- c(1.2, -0.4, 0.1) # Intercept, x1, x2

# Generate linear predictors and transform to parameters
alpha <- exp(alpha_coef[1] + alpha_coef[2] * x1 + alpha_coef[3] * x2)
beta <- exp(beta_coef[1] + beta_coef[2] * x1 + beta_coef[3] * x2)

# Generate responses from Kumaraswamy distribution
y <- rkw(n, alpha = alpha, beta = beta)

# Create data frame
df <- data.frame(y = y, x1 = x1, x2 = x2)

# Fit Kumaraswamy regression model using extended formula syntax
kw_reg <- gkwreg(y ~ x1 + x2 | x1 + x2, data = df, family = "kw")

# Display summary
summary(kw_reg)

# Plot diagnostics
plot(kw_reg)

## Example 2: Generalized Kumaraswamy regression with parameter-specific formulas
set.seed(456)
n <- 400
x1 <- runif(n, -1, 1)
x2 <- rnorm(n)
x3 <- rbinom(n, 1, 0.5)

# Generate regression coefficients for each parameter
alpha_coef <- c(0.5, 0.2) # Intercept, x1
beta_coef <- c(0.8, -0.3, 0.1) # Intercept, x1, x2
gamma_coef <- c(0.6, 0.4) # Intercept, x3
delta_coef <- c(0.0, 0.2) # Intercept, x3
lambda_coef <- c(-0.2, 0.1) # Intercept, x2

# Generate linear predictors and transform to parameters
alpha <- exp(alpha_coef[1] + alpha_coef[2] * x1)
beta <- exp(beta_coef[1] + beta_coef[2] * x1 + beta_coef[3] * x2)
gamma <- exp(gamma_coef[1] + gamma_coef[2] * x3)
delta <- plogis(delta_coef[1] + delta_coef[2] * x3)
lambda <- exp(lambda_coef[1] + lambda_coef[2] * x2)

# Generate response from GKw distribution
y <- rgkw(n, alpha = alpha, beta = beta, gamma = gamma, delta = delta, lambda = lambda)

# Create data frame
df <- data.frame(y = y, x1 = x1, x2 = x2, x3 = as.factor(x3))

# Fit GKw regression with parameter-specific formulas using the extended formula syntax
gkw_reg <- gkwreg(y ~ x1 | x1 + x2 | x3 | x3 | x2, data = df, family = "gkw")

# Compare true vs. estimated coefficients
coef(gkw_reg)

## Example 3: Beta regression for a simpler case
set.seed(789)
n <- 300
x1 <- runif(n, -1, 1)

# Generate regression coefficients
gamma_coef <- c(1.0, 0.5) # Intercept, x1
delta_coef <- c(1.5, -0.7) # Intercept, x1

# Generate linear predictors and transform to parameters
gamma <- exp(gamma_coef[1] + gamma_coef[2] * x1)
delta <- exp(delta_coef[1] + delta_coef[2] * x1)

# Generate response from Beta distribution
y <- rbeta_(n, gamma, delta)

# Create data frame
df <- data.frame(y = y, x1 = x1)

# Fit Beta regression model - for Beta family, we only need the gamma and delta terms
beta_reg <- gkwreg(y ~ . | . | x1 | x1, data = df, family = "beta")

# Display confidence intervals for coefficients
confint(beta_reg)

## Example 4: Model comparison
# Fit multiple models and compare them
kw_reg2 <- gkwreg(y ~ x1 | x1, data = df, family = "kw")
beta_reg2 <- gkwreg(y ~ . | . | x1 | x1, data = df, family = "beta")

# Compare with AIC/BIC
AIC(kw_reg2, beta_reg2)
BIC(kw_reg2, beta_reg2)

## Example 5: Predicting with a fitted model
# Create new data for prediction
newdata <- data.frame(x1 = seq(-1, 1, by = 0.1))

# Predict expected response
pred <- predict(beta_reg, newdata = newdata, type = "response")

# Plot original data and predicted curve
plot(df$x1, df$y, pch = 20, col = "gray")
lines(newdata$x1, pred, col = "red", lwd = 2)
}

}
\references{
Kumaraswamy, P. (1980). A generalized probability density function for double-bounded
random processes. Journal of Hydrology, 46(1-2), 79-88.

Cordeiro, G. M., & de Castro, M. (2011). A new family of generalized distributions.
Journal of Statistical Computation and Simulation, 81(7), 883-898.

Ferrari, S. L. P., & Cribari-Neto, F. (2004). Beta regression for modelling rates and
proportions. Journal of Applied Statistics, 31(7), 799-815.
}
