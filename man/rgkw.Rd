% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{rgkw}
\alias{rgkw}
\title{Random Number Generation for Generalized Kumaraswamy Distribution}
\usage{
rgkw(
  n,
  alpha = as.numeric(c(1)),
  beta = as.numeric(c(1)),
  gamma = as.numeric(c(1)),
  delta = as.numeric(c(0)),
  lambda = as.numeric(c(1))
)
}
\arguments{
\item{n}{Number of random values to generate. Must be a positive integer.}

\item{alpha}{Shape parameter α > 0 (scalar or vector). Controls the left tail behavior. Default: 1.0.}

\item{beta}{Shape parameter β > 0 (scalar or vector). Controls the right tail behavior. Default: 1.0.}

\item{gamma}{Shape parameter γ > 0 (scalar or vector). Affects the central shape. Default: 1.0.}

\item{delta}{Shape parameter δ ≥ 0 (scalar or vector). Introduces additional flexibility. Default: 0.0.}

\item{lambda}{Shape parameter λ > 0 (scalar or vector). Controls overall dispersion. Default: 1.0.}
}
\value{
Vector of length n containing random values from the GKw distribution.
If any parameters are invalid, the function produces an error.
Returns NA for parameter combinations that are invalid.
}
\description{
Generates random deviates from the Generalized Kumaraswamy distribution GKw(α, β, γ, δ, λ).
The implementation uses an efficient transformation method based on the Beta distribution
as derived in Carrasco et al. (2010).
}
\details{
According to Carrasco et al. (2010), if V ~ Beta(γ, δ+1), then:

\deqn{
X = \{1 - [1 - V^{1/\lambda}]^{1/\beta}\}^{1/\alpha}
}

follows a GKw(α, β, γ, δ, λ) distribution.

The random generation algorithm implements this transformation method:
\enumerate{
\item Generate V ~ Beta(γ, δ+1)
\item Compute v = V^(1/λ)
\item Compute tmp = 1 - v
\item Compute tmp2 = tmp^(1/β)
\item Compute x = (1 - tmp2)^(1/α)
}

This implementation includes several optimizations:
\itemize{
\item Special cases for α=1, β=1, or λ=1 are handled directly to improve efficiency
\item Boundary cases are checked at each step to maintain numerical stability
\item Safe power transformations prevent numerical issues with extreme values
\item Full support for vectorized parameters with appropriate broadcasting
}
}
\examples{
\dontrun{
# Generate 1000 random values from a GKw(2,3,1,0,1)
x <- rgkw(1000, 2, 3, 1, 0, 1)

# Histogram of generated values
hist(x, breaks = 30, probability = TRUE,
     main = "Histogram of GKw(2,3,1,0,1) Random Values")

# Add the theoretical density curve
curve(dgkw(x, 2, 3, 1, 0, 1), add = TRUE, col = "red", lwd = 2)

# Comparing empirical and theoretical quantiles
prob_points <- seq(0.1, 0.9, by = 0.1)
theo_quantiles <- qgkw(prob_points, 2, 3, 1, 0, 1)
emp_quantiles <- quantile(x, prob_points)
plot(theo_quantiles, emp_quantiles,
     main = "Q-Q Plot for GKw(2,3,1,0,1)",
     xlab = "Theoretical Quantiles",
     ylab = "Empirical Quantiles")
abline(0, 1, col = "blue")

# Using vectorized parameters
alphas <- c(0.5, 1.0, 2.0)
samples <- rgkw(300, alphas, 2, 1, 0, 1)  # 100 samples from each configuration
hist(samples, breaks = 30, probability = TRUE,
     main = "Mixed GKw Samples with Different Alpha Values")
}

}
\references{
Kumaraswamy, P. (1980). A generalized probability density function for double-bounded random processes.
Journal of Hydrology, 46(1-2), 79-88.

Cordeiro, G. M., & de Castro, M. (2011). A new family of generalized distributions.
Journal of Statistical Computation and Simulation, 81(7), 883-898.
}
