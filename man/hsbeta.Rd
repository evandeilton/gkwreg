% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{hsbeta}
\alias{hsbeta}
\title{Hessian Matrix Function for Beta Log-Likelihood}
\usage{
hsbeta(par, data)
}
\arguments{
\item{par}{NumericVector of length 2 containing parameters (γ, δ) in that order.
All parameters must be positive.}

\item{data}{NumericVector of observations, where all values must be in the open interval (0,1).}
}
\value{
NumericMatrix of dimensions 2x2 containing the Hessian components (second derivatives)
of the negative log-likelihood with respect to each parameter pair (γ, δ).
Returns a matrix of NaN values if any parameters or data values are invalid.
}
\description{
Calculates the Hessian matrix (second-order partial derivatives) of the negative log-likelihood
function for the Beta distribution. This function provides the exact Hessian needed for
efficient optimization in maximum likelihood estimation and for asymptotic inference.
The Beta is a submodel of GKw with α = 1, β = 1, and λ = 1 fixed.
}
\details{
The Hessian matrix contains the following second derivatives of the negative log-likelihood:

\deqn{
\frac{\partial^2 \ell}{\partial \gamma^2} = n[\psi'(\gamma) - \psi'(\gamma+\delta+1)]
}

\deqn{
\frac{\partial^2 \ell}{\partial \gamma \partial \delta} = -n\psi'(\gamma+\delta+1)
}

\deqn{
\frac{\partial^2 \ell}{\partial \delta^2} = n[\psi'(\delta+1) - \psi'(\gamma+\delta+1)]
}

where:
\itemize{
\item \deqn{\psi'} is the trigamma function (second derivative of the log-gamma function)
}

Note that this implementation works with the GKw family parameterization of the Beta
distribution where shape1=γ and shape2=δ+1 in standard statistical notation.

The implementation includes several numerical safeguards:
\itemize{
\item Parameter and data validation with appropriate error handling
\item Symmetry of the Hessian matrix is guaranteed by construction
}

The returned Hessian is for the negative log-likelihood to align with minimization
in optimization routines.
}
\examples{
\dontrun{
# Generate sample data from a Beta distribution
set.seed(123)
x <- rbeta_(100, 2, 3)
hist(x, breaks = 20, main = "Beta(2, 3) Sample")

# Use in optimization with Hessian-based methods
result <- optim(c(0.5, 0.5), llbeta, method = "BFGS",
                hessian = TRUE, data = x)

# Compare numerical and analytical derivatives
num_hess <- numDeriv::hessian(llbeta, x = result$par, data = x)
ana_hess <- hsbeta(result$par, data = x)
round(num_hess - ana_hess, 4)
}

}
