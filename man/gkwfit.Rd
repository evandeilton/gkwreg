% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gkwfit.R
\name{gkwfit}
\alias{gkwfit}
\title{Fit Generalized Kumaraswamy Distribution via Maximum Likelihood Estimation}
\usage{
gkwfit(
  data,
  family = c("gkw", "bkw", "kkw", "ekw", "mc", "kw", "beta"),
  start = NULL,
  fixed = NULL,
  fit = c("nr", "tmb"),
  method = c("nlminb", "optim"),
  use_moments = FALSE,
  hessian = TRUE,
  profile = FALSE,
  npoints = 20,
  plot = TRUE,
  conf.level = 0.95,
  optimizer.control = list(),
  submodels = FALSE,
  silent = TRUE,
  ...
)
}
\arguments{
\item{data}{A numeric vector with values in the (0, 1) interval.}

\item{family}{A character string specifying the distribution family. One of: "gkw" (default),
"bkw", "kkw", "ekw", "mc", "kw", or "beta". See Details for parameter specifications.}

\item{start}{Optional list with initial parameter values. If \code{NULL}, reasonable starting
values will be determined from the data.}

\item{fixed}{Optional list of parameters to be held fixed (not estimated).}

\item{fit}{Estimation method to be used: \code{"tmb"} (default) for TMB or \code{"nr"} for Newton-Raphson.}

\item{method}{(Only for \code{fit = "tmb"}) Optimization method to be used: \code{"nlminb"} (default) or \code{"optim"}.}

\item{use_moments}{Logical; if \code{TRUE}, uses the method of moments for initial values.}

\item{hessian}{Logical; if \code{TRUE}, computes standard errors and the covariance matrix.}

\item{profile}{Logical; if \code{TRUE}, computes likelihood profiles for parameters.}

\item{npoints}{Number of points to use in profile likelihood calculations.}

\item{plot}{Logical; if \code{TRUE}, generates diagnostic plots.}

\item{conf.level}{Confidence level for intervals (default: 0.95).}

\item{optimizer.control}{List of control parameters passed to the optimizer. Default values
are set internally based on the chosen method.}

\item{submodels}{Logical; if \code{TRUE}, fits nested submodels for comparison.}

\item{silent}{Logical; if \code{TRUE}, suppresses messages.}

\item{...}{Additional arguments passed to internal functions.}
}
\value{
An object of class \code{"gkwfit"} containing the fitted model. The names of the objects
in the output list are preserved for compatibility.
}
\description{
Fits any distribution from the Generalized Kumaraswamy (GKw) family to data using maximum
likelihood estimation via TMB (Template Model Builder) or Newton-Raphson optimization.
The function supports all seven submodels of the GKw family.
}
\details{
The \code{gkwfit} function implements fitting for all seven distributions in the Generalized Kumaraswamy family:
\itemize{
\item \strong{GKw} (Generalized Kumaraswamy): 5 parameters (α, β, γ, δ, λ)
\item \strong{BKw} (Beta-Kumaraswamy): 4 parameters (α, β, γ, δ), with λ = 1 fixed
\item \strong{KKw} (Kumaraswamy-Kumaraswamy): 4 parameters (α, β, δ, λ), with γ = 1 fixed
\item \strong{EKw} (Exponentiated Kumaraswamy): 3 parameters (α, β, λ), with γ = 1, δ = 0 fixed
\item \strong{Mc} (McDonald/Beta Power): 3 parameters (γ, δ, λ), with α = 1, β = 1 fixed
\item \strong{Kw} (Kumaraswamy): 2 parameters (α, β), with γ = 1, δ = 0, λ = 1 fixed
\item \strong{Beta}: 2 parameters (γ, δ), with α = 1, β = 1, λ = 1 fixed
}

The function offers two estimation methods:
\itemize{
\item \code{fit = "tmb"}: Uses Template Model Builder (TMB) for fitting, with the option to choose
the optimization method via the \code{method} argument, which can be \code{"nlminb"} or \code{"optim"}.
\item \code{fit = "nr"}: Uses the Newton-Raphson method for fitting. In this case, the \code{method}
argument is ignored.
}

Default values for optimizer control parameters (\code{optimizer.control}) are:
\itemize{
\item For \code{"nlminb"}: \code{list(eval.max = 500, iter.max = 300)}.
\item For \code{"optim"}: \code{list(maxit = 500)}.
\item For Newton-Raphson (\code{fit = "nr"}): \code{list(tol = 1e-6, max_iter = 100, step_size = 1.0,
        enforce_bounds = TRUE, min_param_val = 1e-5, max_param_val = 1e5)}.
}
}
\examples{
\dontrun{

require(gkwreg)
## Example 1: Basic Kumaraswamy distribution fitting
# Generate sample data from a Kumaraswamy distribution
set.seed(123)
n <- 2000
kw_data <- rkw(n, alpha = 2.5, beta = 1.5)

# Fit the Kumaraswamy distribution to the data
kw_fit <- gkwfit(data = kw_data, family = "kw")

# Display summary of the fitted model
summary(kw_fit)

# Plot the fitted distribution against the data
kw_fit$plots

## Example 2: Fitting a Generalized Kumaraswamy distribution
# Generate sample data from a GKw distribution
set.seed(456)
gkw_data <- rgkw(n,
  alpha = 2.0, beta = 3.0,
  gamma = 1.5, delta = 2.5, lambda = 0.8
)

# Fit the GKw distribution using TMB
gkw_fit <- gkwfit(data = gkw_data, family = "gkw", fit = "tmb")

# Display parameter estimates with confidence intervals
confint(gkw_fit)

## Example 3: Comparing different estimation methods
# Generate sample data from a Beta-Kumaraswamy distribution
set.seed(7809)
bkw_data <- rbkw(n, alpha = 1.8, beta = 2.2, gamma = 0.9, delta = 1.2)

# Fit using TMB with nlminb optimizer
bkw_fit_tmb <- gkwfit(
  data = bkw_data, family = "bkw",
  fit = "tmb", method = "nlminb"
)

# Fit using Newton-Raphson method
bkw_fit_nr <- gkwfit(data = bkw_data, family = "bkw", fit = "nr")

# Compare parameter estimates
cbind(TMB = coef(bkw_fit_tmb), NR = coef(bkw_fit_nr))

## Example 4: Fixing parameters during estimation
# Generate data from a Kumaraswamy-Kumaraswamy distribution
set.seed(101)
kkw_data <- rkkw(n, alpha = 2.5, beta = 1.8, delta = 1.5, lambda = 0.7)

# Fit the model with lambda fixed at 0.7
kkw_fit <- gkwfit(
  data = kkw_data, family = "kkw",
  fixed = list(lambda = 0.7)
)

# Display results
coef(kkw_fit)

## Example 5: Profile likelihoods
# Generate data from McDonald distribution
set.seed(202)
mc_data <- rbp(n, gamma = 2.0, delta = 1.5, lambda = 0.9)

# Fit the model with profile likelihoods
mc_fit <- gkwfit(
  data = mc_data, family = "mc",
  profile = TRUE, npoints = 15
)

# Plot profile likelihoods
mc_fit$plots

## Example 6: Fitting and comparing submodels
# Generate data from Exponentiated Kumaraswamy distribution
set.seed(303)
ekw_data <- rekw(n, alpha = 1.7, beta = 2.3, lambda = 1.2)

# Fit the model and all its submodels
ekw_fit <- gkwfit(data = ekw_data, family = "gkw", fit = "tmb", submodels = TRUE)

# Display likelihood ratio tests
do.call(rbind, ekw_fit$lrt)

## Example 7: Using method of moments for initialization
# Generate data from Beta distribution
set.seed(404)
beta_data <- rbeta(n, shape1 = 2.0, shape2 = 3.0)

# Fit using method of moments for starting values
beta_fit <- gkwfit(data = beta_data, family = "beta", use_moments = TRUE)

# Check starting values vs final estimates
beta_fit$plots
coef(beta_fit)

## Example 8: Custom optimizer control
# Generate data from Kumaraswamy distribution
set.seed(505)
kw_data2 <- rkw(n, alpha = 0.8, beta = 1.2)

# Fit with custom optimizer settings for more iterations
kw_fit2 <- gkwfit(
  data = kw_data2, family = "kw",
  optimizer.control = list(eval.max = 1000, iter.max = 600)
)

# Check convergence
kw_fit2$convergence

## Example 9: Goodness-of-fit assessment
# Generate data from GKw distribution
set.seed(606)
gkw_data2 <- rgkw(n,
  alpha = 1.5, beta = 2.0,
  gamma = 1.2, delta = 0.8, lambda = 1.1
)

# Fit the model
gkw_fit2 <- gkwfit(data = gkw_data2, family = "gkw")

# Check goodness-of-fit measures
gkw_fit2$gof

# Perform a Kolmogorov-Smirnov test
ks.test(gkw_data2, function(x) {
  pgkw(x,
    alpha = coef(gkw_fit2)[1],
    beta = coef(gkw_fit2)[2],
    gamma = coef(gkw_fit2)[3],
    delta = coef(gkw_fit2)[4],
    lambda = coef(gkw_fit2)[5]
  )
})

## Example 10: Dealing with bounded data
# Transform data to (0,1) interval if needed
set.seed(707)
original_data <- rnorm(n, mean = 10, sd = 2)

# Transform data to (0,1) interval
transformed_data <- (original_data - min(original_data)) /
  (max(original_data) - min(original_data))

# Fit a suitable model
trans_fit <- gkwfit(data = transformed_data, family = "gkw")

# Back-transform results for prediction in original scale
# Example of predicting quantiles in original scale
orig_min <- min(original_data)
orig_max <- max(original_data)
quantiles <- qgkw(
  p = c(0.1, 0.25, 0.5, 0.75, 0.9),
  alpha = coef(trans_fit)[1],
  beta = coef(trans_fit)[2],
  gamma = coef(trans_fit)[3],
  delta = coef(trans_fit)[4],
  lambda = coef(trans_fit)[5]
)
original_quantiles <- quantiles * (orig_max - orig_min) + orig_min
print(original_quantiles)
}
}
\references{
Kumaraswamy, P. (1980). A generalized probability density function for double-bounded
random processes. Journal of Hydrology, 46(1-2), 79-88.

Cordeiro, G. M., & de Castro, M. (2011). A new family of generalized distributions.
Journal of Statistical Computation and Simulation, 81(7), 883-898.
}
