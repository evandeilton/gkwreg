// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateParameters
NumericMatrix calculateParameters(const NumericMatrix& X1, const NumericMatrix& X2, const NumericMatrix& X3, const NumericMatrix& X4, const NumericMatrix& X5, const NumericVector& beta1, const NumericVector& beta2, const NumericVector& beta3, const NumericVector& beta4, const NumericVector& beta5, const IntegerVector& link_types, const NumericVector& scale_factors, const std::string& family);
RcppExport SEXP _gkwreg_calculateParameters(SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP X4SEXP, SEXP X5SEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta4SEXP, SEXP beta5SEXP, SEXP link_typesSEXP, SEXP scale_factorsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X4(X4SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X5(X5SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta4(beta4SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta5(beta5SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type link_types(link_typesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale_factors(scale_factorsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateParameters(X1, X2, X3, X4, X5, beta1, beta2, beta3, beta4, beta5, link_types, scale_factors, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateMeans
NumericVector calculateMeans(const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateMeans(SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMeans(params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateDensities
NumericVector calculateDensities(const NumericVector& y, const NumericMatrix& params, const std::string& family, bool log);
RcppExport SEXP _gkwreg_calculateDensities(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateDensities(y, params, family, log));
    return rcpp_result_gen;
END_RCPP
}
// calculateProbabilities
NumericVector calculateProbabilities(const NumericVector& y, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateProbabilities(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateProbabilities(y, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateQuantiles
NumericVector calculateQuantiles(const NumericVector& probs, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateQuantiles(SEXP probsSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateQuantiles(probs, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateResponseResiduals
NumericVector calculateResponseResiduals(const NumericVector& y, const NumericVector& fitted);
RcppExport SEXP _gkwreg_calculateResponseResiduals(SEXP ySEXP, SEXP fittedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateResponseResiduals(y, fitted));
    return rcpp_result_gen;
END_RCPP
}
// calculatePearsonResiduals
NumericVector calculatePearsonResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculatePearsonResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePearsonResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateDevianceResiduals
NumericVector calculateDevianceResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateDevianceResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateDevianceResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateQuantileResiduals
NumericVector calculateQuantileResiduals(const NumericVector& y, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateQuantileResiduals(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateQuantileResiduals(y, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateCoxSnellResiduals
NumericVector calculateCoxSnellResiduals(const NumericVector& y, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateCoxSnellResiduals(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCoxSnellResiduals(y, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateScoreResiduals
NumericVector calculateScoreResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateScoreResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateScoreResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateModifiedDevianceResiduals
NumericVector calculateModifiedDevianceResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateModifiedDevianceResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateModifiedDevianceResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculatePartialResiduals
NumericVector calculatePartialResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& X, const NumericVector& beta, int covariate_idx);
RcppExport SEXP _gkwreg_calculatePartialResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP covariate_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type covariate_idx(covariate_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePartialResiduals(y, fitted, X, beta, covariate_idx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gkwreg_calculateParameters", (DL_FUNC) &_gkwreg_calculateParameters, 13},
    {"_gkwreg_calculateMeans", (DL_FUNC) &_gkwreg_calculateMeans, 2},
    {"_gkwreg_calculateDensities", (DL_FUNC) &_gkwreg_calculateDensities, 4},
    {"_gkwreg_calculateProbabilities", (DL_FUNC) &_gkwreg_calculateProbabilities, 3},
    {"_gkwreg_calculateQuantiles", (DL_FUNC) &_gkwreg_calculateQuantiles, 3},
    {"_gkwreg_calculateResponseResiduals", (DL_FUNC) &_gkwreg_calculateResponseResiduals, 2},
    {"_gkwreg_calculatePearsonResiduals", (DL_FUNC) &_gkwreg_calculatePearsonResiduals, 4},
    {"_gkwreg_calculateDevianceResiduals", (DL_FUNC) &_gkwreg_calculateDevianceResiduals, 4},
    {"_gkwreg_calculateQuantileResiduals", (DL_FUNC) &_gkwreg_calculateQuantileResiduals, 3},
    {"_gkwreg_calculateCoxSnellResiduals", (DL_FUNC) &_gkwreg_calculateCoxSnellResiduals, 3},
    {"_gkwreg_calculateScoreResiduals", (DL_FUNC) &_gkwreg_calculateScoreResiduals, 4},
    {"_gkwreg_calculateModifiedDevianceResiduals", (DL_FUNC) &_gkwreg_calculateModifiedDevianceResiduals, 4},
    {"_gkwreg_calculatePartialResiduals", (DL_FUNC) &_gkwreg_calculatePartialResiduals, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gkwreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
