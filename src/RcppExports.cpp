// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gkwgetstartvalues
Rcpp::NumericVector gkwgetstartvalues(const Rcpp::NumericVector& x, int n_starts);
RcppExport SEXP _gkwreg_gkwgetstartvalues(SEXP xSEXP, SEXP n_startsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n_starts(n_startsSEXP);
    rcpp_result_gen = Rcpp::wrap(gkwgetstartvalues(x, n_starts));
    return rcpp_result_gen;
END_RCPP
}
// dgkw
Rcpp::NumericVector dgkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwreg_dgkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dgkw(x, alpha, beta, gamma, delta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pgkw
Rcpp::NumericVector pgkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pgkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pgkw(q, alpha, beta, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qgkw
Rcpp::NumericVector qgkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qgkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qgkw(p, alpha, beta, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rgkw
Rcpp::NumericVector rgkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwreg_rgkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rgkw(n, alpha, beta, gamma, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llgkw
double llgkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llgkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llgkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grgkw
Rcpp::NumericVector grgkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grgkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grgkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsgkw
Rcpp::NumericMatrix hsgkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hsgkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsgkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dkkw
Rcpp::NumericVector dkkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwreg_dkkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dkkw(x, alpha, beta, delta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pkkw
Rcpp::NumericVector pkkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pkkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pkkw(q, alpha, beta, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qkkw
Rcpp::NumericVector qkkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qkkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qkkw(p, alpha, beta, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rkkw
Rcpp::NumericVector rkkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwreg_rkkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rkkw(n, alpha, beta, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llkkw
double llkkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llkkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llkkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grkkw
Rcpp::NumericVector grkkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grkkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grkkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hskkw
Rcpp::NumericMatrix hskkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hskkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hskkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dbkw
Rcpp::NumericVector dbkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool log_prob);
RcppExport SEXP _gkwreg_dbkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dbkw(x, alpha, beta, gamma, delta, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pbkw
Rcpp::NumericVector pbkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pbkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbkw(q, alpha, beta, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qbkw
Rcpp::NumericVector qbkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qbkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qbkw(p, alpha, beta, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rbkw
Rcpp::NumericVector rbkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta);
RcppExport SEXP _gkwreg_rbkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(rbkw(n, alpha, beta, gamma, delta));
    return rcpp_result_gen;
END_RCPP
}
// llbkw
double llbkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llbkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llbkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grbkw
Rcpp::NumericVector grbkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grbkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grbkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsbkw
Rcpp::NumericMatrix hsbkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hsbkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsbkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dekw
Rcpp::NumericVector dekw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwreg_dekw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dekw(x, alpha, beta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pekw
Rcpp::NumericVector pekw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pekw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pekw(q, alpha, beta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qekw
Rcpp::NumericVector qekw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qekw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qekw(p, alpha, beta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rekw
Rcpp::NumericVector rekw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwreg_rekw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rekw(n, alpha, beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llekw
double llekw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llekw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llekw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grekw
Rcpp::NumericVector grekw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grekw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grekw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsekw
Rcpp::NumericMatrix hsekw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hsekw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsekw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dmc
Rcpp::NumericVector dmc(const arma::vec& x, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwreg_dmc(SEXP xSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dmc(x, gamma, delta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pmc
Rcpp::NumericVector pmc(const arma::vec& q, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pmc(SEXP qSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pmc(q, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qmc
Rcpp::NumericVector qmc(const arma::vec& p, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qmc(SEXP pSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qmc(p, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rmc
Rcpp::NumericVector rmc(int n, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwreg_rmc(SEXP nSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmc(n, gamma, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llmc
double llmc(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llmc(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llmc(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grmc
Rcpp::NumericVector grmc(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grmc(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grmc(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsmc
Rcpp::NumericMatrix hsmc(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hsmc(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmc(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dkw
Rcpp::NumericVector dkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, bool log_prob);
RcppExport SEXP _gkwreg_dkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dkw(x, alpha, beta, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pkw
Rcpp::NumericVector pkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pkw(q, alpha, beta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qkw
Rcpp::NumericVector qkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qkw(p, alpha, beta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rkw
Rcpp::NumericVector rkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta);
RcppExport SEXP _gkwreg_rkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rkw(n, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// llkw
double llkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grkw
Rcpp::NumericVector grkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hskw
Rcpp::NumericMatrix hskw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hskw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hskw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dbeta_
Rcpp::NumericVector dbeta_(const arma::vec& x, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool log_prob);
RcppExport SEXP _gkwreg_dbeta_(SEXP xSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dbeta_(x, gamma, delta, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pbeta_
Rcpp::NumericVector pbeta_(const arma::vec& q, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_pbeta_(SEXP qSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbeta_(q, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qbeta_
Rcpp::NumericVector qbeta_(const arma::vec& p, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwreg_qbeta_(SEXP pSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qbeta_(p, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rbeta_
Rcpp::NumericVector rbeta_(int n, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta);
RcppExport SEXP _gkwreg_rbeta_(SEXP nSEXP, SEXP gammaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(rbeta_(n, gamma, delta));
    return rcpp_result_gen;
END_RCPP
}
// llbeta
double llbeta(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_llbeta(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llbeta(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grbeta
Rcpp::NumericVector grbeta(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_grbeta(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grbeta(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsbeta
Rcpp::NumericMatrix hsbeta(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwreg_hsbeta(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsbeta(par, data));
    return rcpp_result_gen;
END_RCPP
}
// nrgkw
Rcpp::List nrgkw(Rcpp::Nullable<Rcpp::NumericVector> start, Rcpp::NumericVector data, std::string family, double tol, int max_iter, bool verbose, std::string optimization_method, bool enforce_bounds, double min_param_val, double max_param_val, bool adaptive_scaling, bool use_stochastic_perturbation, bool get_num_hess, int multi_start_attempts, bool eigenvalue_hessian_reg, int max_backtrack, double initial_trust_radius);
RcppExport SEXP _gkwreg_nrgkw(SEXP startSEXP, SEXP dataSEXP, SEXP familySEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP optimization_methodSEXP, SEXP enforce_boundsSEXP, SEXP min_param_valSEXP, SEXP max_param_valSEXP, SEXP adaptive_scalingSEXP, SEXP use_stochastic_perturbationSEXP, SEXP get_num_hessSEXP, SEXP multi_start_attemptsSEXP, SEXP eigenvalue_hessian_regSEXP, SEXP max_backtrackSEXP, SEXP initial_trust_radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type optimization_method(optimization_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type enforce_bounds(enforce_boundsSEXP);
    Rcpp::traits::input_parameter< double >::type min_param_val(min_param_valSEXP);
    Rcpp::traits::input_parameter< double >::type max_param_val(max_param_valSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive_scaling(adaptive_scalingSEXP);
    Rcpp::traits::input_parameter< bool >::type use_stochastic_perturbation(use_stochastic_perturbationSEXP);
    Rcpp::traits::input_parameter< bool >::type get_num_hess(get_num_hessSEXP);
    Rcpp::traits::input_parameter< int >::type multi_start_attempts(multi_start_attemptsSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvalue_hessian_reg(eigenvalue_hessian_regSEXP);
    Rcpp::traits::input_parameter< int >::type max_backtrack(max_backtrackSEXP);
    Rcpp::traits::input_parameter< double >::type initial_trust_radius(initial_trust_radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(nrgkw(start, data, family, tol, max_iter, verbose, optimization_method, enforce_bounds, min_param_val, max_param_val, adaptive_scaling, use_stochastic_perturbation, get_num_hess, multi_start_attempts, eigenvalue_hessian_reg, max_backtrack, initial_trust_radius));
    return rcpp_result_gen;
END_RCPP
}
// calculateParameters
NumericMatrix calculateParameters(const NumericMatrix& X1, const NumericMatrix& X2, const NumericMatrix& X3, const NumericMatrix& X4, const NumericMatrix& X5, const NumericVector& beta1, const NumericVector& beta2, const NumericVector& beta3, const NumericVector& beta4, const NumericVector& beta5, const IntegerVector& link_types, const NumericVector& scale_factors, const std::string& family);
RcppExport SEXP _gkwreg_calculateParameters(SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP X4SEXP, SEXP X5SEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta4SEXP, SEXP beta5SEXP, SEXP link_typesSEXP, SEXP scale_factorsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X4(X4SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X5(X5SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta4(beta4SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta5(beta5SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type link_types(link_typesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale_factors(scale_factorsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateParameters(X1, X2, X3, X4, X5, beta1, beta2, beta3, beta4, beta5, link_types, scale_factors, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateMeans
NumericVector calculateMeans(const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateMeans(SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMeans(params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateDensities
NumericVector calculateDensities(const NumericVector& y, const NumericMatrix& params, const std::string& family, bool log);
RcppExport SEXP _gkwreg_calculateDensities(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateDensities(y, params, family, log));
    return rcpp_result_gen;
END_RCPP
}
// calculateProbabilities
NumericVector calculateProbabilities(const NumericVector& y, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateProbabilities(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateProbabilities(y, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateQuantiles
NumericVector calculateQuantiles(const NumericVector& probs, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateQuantiles(SEXP probsSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateQuantiles(probs, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateResponseResiduals
NumericVector calculateResponseResiduals(const NumericVector& y, const NumericVector& fitted);
RcppExport SEXP _gkwreg_calculateResponseResiduals(SEXP ySEXP, SEXP fittedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateResponseResiduals(y, fitted));
    return rcpp_result_gen;
END_RCPP
}
// calculatePearsonResiduals
NumericVector calculatePearsonResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculatePearsonResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePearsonResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateDevianceResiduals
NumericVector calculateDevianceResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateDevianceResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateDevianceResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateQuantileResiduals
NumericVector calculateQuantileResiduals(const NumericVector& y, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateQuantileResiduals(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateQuantileResiduals(y, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateCoxSnellResiduals
NumericVector calculateCoxSnellResiduals(const NumericVector& y, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateCoxSnellResiduals(SEXP ySEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCoxSnellResiduals(y, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateScoreResiduals
NumericVector calculateScoreResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateScoreResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateScoreResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculateModifiedDevianceResiduals
NumericVector calculateModifiedDevianceResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& params, const std::string& family);
RcppExport SEXP _gkwreg_calculateModifiedDevianceResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP paramsSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(calculateModifiedDevianceResiduals(y, fitted, params, family));
    return rcpp_result_gen;
END_RCPP
}
// calculatePartialResiduals
NumericVector calculatePartialResiduals(const NumericVector& y, const NumericVector& fitted, const NumericMatrix& X, const NumericVector& beta, int covariate_idx);
RcppExport SEXP _gkwreg_calculatePartialResiduals(SEXP ySEXP, SEXP fittedSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP covariate_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type covariate_idx(covariate_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePartialResiduals(y, fitted, X, beta, covariate_idx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gkwreg_gkwgetstartvalues", (DL_FUNC) &_gkwreg_gkwgetstartvalues, 2},
    {"_gkwreg_dgkw", (DL_FUNC) &_gkwreg_dgkw, 7},
    {"_gkwreg_pgkw", (DL_FUNC) &_gkwreg_pgkw, 8},
    {"_gkwreg_qgkw", (DL_FUNC) &_gkwreg_qgkw, 8},
    {"_gkwreg_rgkw", (DL_FUNC) &_gkwreg_rgkw, 6},
    {"_gkwreg_llgkw", (DL_FUNC) &_gkwreg_llgkw, 2},
    {"_gkwreg_grgkw", (DL_FUNC) &_gkwreg_grgkw, 2},
    {"_gkwreg_hsgkw", (DL_FUNC) &_gkwreg_hsgkw, 2},
    {"_gkwreg_dkkw", (DL_FUNC) &_gkwreg_dkkw, 6},
    {"_gkwreg_pkkw", (DL_FUNC) &_gkwreg_pkkw, 7},
    {"_gkwreg_qkkw", (DL_FUNC) &_gkwreg_qkkw, 7},
    {"_gkwreg_rkkw", (DL_FUNC) &_gkwreg_rkkw, 5},
    {"_gkwreg_llkkw", (DL_FUNC) &_gkwreg_llkkw, 2},
    {"_gkwreg_grkkw", (DL_FUNC) &_gkwreg_grkkw, 2},
    {"_gkwreg_hskkw", (DL_FUNC) &_gkwreg_hskkw, 2},
    {"_gkwreg_dbkw", (DL_FUNC) &_gkwreg_dbkw, 6},
    {"_gkwreg_pbkw", (DL_FUNC) &_gkwreg_pbkw, 7},
    {"_gkwreg_qbkw", (DL_FUNC) &_gkwreg_qbkw, 7},
    {"_gkwreg_rbkw", (DL_FUNC) &_gkwreg_rbkw, 5},
    {"_gkwreg_llbkw", (DL_FUNC) &_gkwreg_llbkw, 2},
    {"_gkwreg_grbkw", (DL_FUNC) &_gkwreg_grbkw, 2},
    {"_gkwreg_hsbkw", (DL_FUNC) &_gkwreg_hsbkw, 2},
    {"_gkwreg_dekw", (DL_FUNC) &_gkwreg_dekw, 5},
    {"_gkwreg_pekw", (DL_FUNC) &_gkwreg_pekw, 6},
    {"_gkwreg_qekw", (DL_FUNC) &_gkwreg_qekw, 6},
    {"_gkwreg_rekw", (DL_FUNC) &_gkwreg_rekw, 4},
    {"_gkwreg_llekw", (DL_FUNC) &_gkwreg_llekw, 2},
    {"_gkwreg_grekw", (DL_FUNC) &_gkwreg_grekw, 2},
    {"_gkwreg_hsekw", (DL_FUNC) &_gkwreg_hsekw, 2},
    {"_gkwreg_dmc", (DL_FUNC) &_gkwreg_dmc, 5},
    {"_gkwreg_pmc", (DL_FUNC) &_gkwreg_pmc, 6},
    {"_gkwreg_qmc", (DL_FUNC) &_gkwreg_qmc, 6},
    {"_gkwreg_rmc", (DL_FUNC) &_gkwreg_rmc, 4},
    {"_gkwreg_llmc", (DL_FUNC) &_gkwreg_llmc, 2},
    {"_gkwreg_grmc", (DL_FUNC) &_gkwreg_grmc, 2},
    {"_gkwreg_hsmc", (DL_FUNC) &_gkwreg_hsmc, 2},
    {"_gkwreg_dkw", (DL_FUNC) &_gkwreg_dkw, 4},
    {"_gkwreg_pkw", (DL_FUNC) &_gkwreg_pkw, 5},
    {"_gkwreg_qkw", (DL_FUNC) &_gkwreg_qkw, 5},
    {"_gkwreg_rkw", (DL_FUNC) &_gkwreg_rkw, 3},
    {"_gkwreg_llkw", (DL_FUNC) &_gkwreg_llkw, 2},
    {"_gkwreg_grkw", (DL_FUNC) &_gkwreg_grkw, 2},
    {"_gkwreg_hskw", (DL_FUNC) &_gkwreg_hskw, 2},
    {"_gkwreg_dbeta_", (DL_FUNC) &_gkwreg_dbeta_, 4},
    {"_gkwreg_pbeta_", (DL_FUNC) &_gkwreg_pbeta_, 5},
    {"_gkwreg_qbeta_", (DL_FUNC) &_gkwreg_qbeta_, 5},
    {"_gkwreg_rbeta_", (DL_FUNC) &_gkwreg_rbeta_, 3},
    {"_gkwreg_llbeta", (DL_FUNC) &_gkwreg_llbeta, 2},
    {"_gkwreg_grbeta", (DL_FUNC) &_gkwreg_grbeta, 2},
    {"_gkwreg_hsbeta", (DL_FUNC) &_gkwreg_hsbeta, 2},
    {"_gkwreg_nrgkw", (DL_FUNC) &_gkwreg_nrgkw, 17},
    {"_gkwreg_calculateParameters", (DL_FUNC) &_gkwreg_calculateParameters, 13},
    {"_gkwreg_calculateMeans", (DL_FUNC) &_gkwreg_calculateMeans, 2},
    {"_gkwreg_calculateDensities", (DL_FUNC) &_gkwreg_calculateDensities, 4},
    {"_gkwreg_calculateProbabilities", (DL_FUNC) &_gkwreg_calculateProbabilities, 3},
    {"_gkwreg_calculateQuantiles", (DL_FUNC) &_gkwreg_calculateQuantiles, 3},
    {"_gkwreg_calculateResponseResiduals", (DL_FUNC) &_gkwreg_calculateResponseResiduals, 2},
    {"_gkwreg_calculatePearsonResiduals", (DL_FUNC) &_gkwreg_calculatePearsonResiduals, 4},
    {"_gkwreg_calculateDevianceResiduals", (DL_FUNC) &_gkwreg_calculateDevianceResiduals, 4},
    {"_gkwreg_calculateQuantileResiduals", (DL_FUNC) &_gkwreg_calculateQuantileResiduals, 3},
    {"_gkwreg_calculateCoxSnellResiduals", (DL_FUNC) &_gkwreg_calculateCoxSnellResiduals, 3},
    {"_gkwreg_calculateScoreResiduals", (DL_FUNC) &_gkwreg_calculateScoreResiduals, 4},
    {"_gkwreg_calculateModifiedDevianceResiduals", (DL_FUNC) &_gkwreg_calculateModifiedDevianceResiduals, 4},
    {"_gkwreg_calculatePartialResiduals", (DL_FUNC) &_gkwreg_calculatePartialResiduals, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gkwreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
